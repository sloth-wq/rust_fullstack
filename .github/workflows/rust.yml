name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_cache:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/cache_cargo
      - name: build
        run: cargo build

  fmt:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build_cache
    steps:
      - uses: actions/checkout@v3
      - name: Get Rust toolchain version
        id: rust-toolchain
        run: |
          VERSION=`cat rust-toolchain`
          echo ::set-output name=value::$VERSION
      - uses: ./.github/actions/cache_cargo
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}
          profile: minimal
          components: rustfmt
      - name: fmt
        run: cargo-fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    needs: build_cache
    steps:
      - uses: actions/checkout@v3
      - name: Get Rust toolchain version
        id: rust-toolchain
        run: |
          VERSION=`cat rust-toolchain`
          echo ::set-output name=value::$VERSION
      - uses: ./.github/actions/cache_cargo
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust-toolchain.outputs.value }}
          profile: minimal
          components: clippy
      - name: clippy
        run: cargo clippy -- -D warnings

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      RUSTC_FORCE_INCREMENTAL: 1
    needs: build_cache
    steps:
      - name: create database for test
        run: PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test"
      - uses: actions/checkout@v3
      - uses: ./.github/actions/cache_cargo
      - name: test
        run: cargo test --all -- --nocapture
